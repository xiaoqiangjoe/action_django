'''
对比views里的对吗
'''

import re
import uuid

from rest_framework.exceptions import ValidationError
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import serializers
from django_redis import get_redis_connection

from app01 import models
from utils.tencent.msg import send_message

# Create your views here.


'''
class MessageSerializer(serializers.ModelSerializer):
    """
    这段代码是我们在有表的时候使用的 现在没有表 我们用继承serializers.Serializer
    下面的class Meta也不能要了
    """
    class Meta:
        model = "表"
        fileds = "__all__"
'''


def phone_validator(value):
    if not re.match(r'^(1[3|4|5|6|7|8|9])\d{9}$', value):
        raise ValidationError("手机号格式错误")


class MessageSerializer(serializers.Serializer):
    '''
    只是默认验证phone不为空 自己要是想加验证 自己加一个 validators 还可以钩子校验
    顺序 先校验默认不为空，在校验validators 在校验钩子函数
    '''
    phone = serializers.CharField(label="手机号", validators=[phone_validator, ])

    # def validate_phone(self, value):
    #     pass


class MessageView(APIView):
    def get(self, request, *args, **kwargs):
        '''
        获取手机号
        :param request:
        :param args:
        :param kwargs:
        :return:
        '''

        '''
        1. 获取手机号
        2. 手机格式校验
        3. 生成随机验证码
        4. 验证码发送到手机上
        5. 把验证码+手机号保留（30s过期）

            用redis做conn.set("13811091111","1459",ex=30)
            conn.get("13811091111")获取验证码 再和用户对比
        '''
        # 1. 获取手机号
        # phone = request.query_params.get('phone')
        # print('phone',phone)

        #  2. 手机格式校验
        # ①
        '''
        import re
        if not re.match(r'^(1[3|4|5|6|7|8|9])\d{9}$',phone):
            return Response("手机号格式错误")
        '''
        # ②
        ser = MessageSerializer(data=request.query_params)

        if not ser.is_valid():
            return Response({'status': False, 'message': '手机号格式错误'})

        phone = ser.validated_data.get("phone")

        # 3. 生成随机验证码
        import random
        random_code = random.randint(1000, 9999)
        print('82行random_code', random_code)

        # 4. 验证码发送到手机上 购买服务器进行发送短信；阿里云/ 腾讯云
        ''' 
        result = send_message(phone, random_code)
        if not result:
            return Response({"status": False, 'message': '短信发送失败'})
        '''
        # 5. 把验证码+手机号保留（30s过期）
        # 5.1 搭建redis  腾讯云 阿里云  也有
        # 5.2 django-redis
        # from django_redis import get_redis_connection
        conn = get_redis_connection()
        conn.set(phone, random_code, ex=60)
        return Response({"status": True, "message": '发送成功'})


class LoginSerializer(serializers.Serializer):
    phone = serializers.CharField(label="手机号", validators=[phone_validator, ])
    code = serializers.CharField(label="验证码")

    def validate_code(self, value):
        '''
        校验验证码
        :param value:
        :return:
        '''
        if len(value) != 4:
            raise ValidationError('短信格式错误')
        if not value.isdecimal():
            raise ValidationError('短信格式错误')

        '''
        initial_data 在这样必须用 initial_data相当于request.data 
        对比一下 is_valid中validated_data
        '''
        phone = self.initial_data.get('phone')
        # code验证
        conn = get_redis_connection()
        code = conn.get(phone)
        if not code:
            raise ValidationError('验证码过期')
        if value != code.decode('utf-8'):
            raise ValidationError('验证码过期')
        return value


class LoginView(APIView):
    def post(self, request, *args, **kwargs):
        print(request.data)
        '''
        1. 校验手机号是否合法
        2. 校验验证码 redis
            - 无验证码
            - 有验证码 输入错误
            - 有验证码 输入成功
        3. 去数据库中获取用户信息（获取/创建）
        4. 将一些信息返回给小程序
        '''
        ser = LoginSerializer(data=request.data)
        if not ser.is_valid():
            return Response({"status": False, 'message': '验证码错误'})

        phone = ser.validated_data.get('phone')
        ''' 
        user = models.UserInfo.objects.filter(phone=phone).first()
        if not user:
            models.UserInfo.objects.create(phone=phone,token=str(uuid.uuid4()))
        else:
            user.token = uuid.uuid4()
            user.save()
        '''
        user_object, flag = models.UserInfo.objects.get_or_create(phone=phone)
        user_object.token = str(uuid.uuid4())
        user_object.save()
        return Response({"status": True, 'data': {'phone': phone, 'token': user_object.token}})
